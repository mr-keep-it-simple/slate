---
title: enjine.io CloudStore

language_tabs: # must be one of https://git.io/vQNgJ
  - javascript

toc_footers:
  - <a href='http://enjine.io/index.php/platforms/cloud/#idPricing'>Sign Up for a CloudStore API Key</a>

includes:

search: true

code_clipboard: true

code_run: true
---
# Overview

<div id="img-overview"><%= image_tag "images/enjine_io_architecture.png" %></div>

CloudStore uses API keys to allow access to the CloudStore service. You can register a new CloudStore key on our [enjine.io portal](http://enjine.io/index.php/platforms/cloud/#idPricing).

This feature makes it possible to:

 - Save data outside of your app to share with other apps (both apps need to use the same CloudStore key)
 - Keep your data persistent even if your app gets deleted from your device or you install your app on another device

# Data

## Saving data

`cloud.Save( key, value, callback )`

### Query Parameters

Parameter | Required | Description
--------- | ------- | -----------
key | yes | A string id to identify the data to store. This value is case sensitive.
value | yes | The data to store.  You can store a string, integer, or even pass a JavaScript object.
callback | no | A function that returns 3 parameters: error, response, status

### Example

```javascript
//Create CloudStore component.
cloud = app.CreateCloudStore( "<YOUR_CLOUDSTORE_KEY>" )

//Save some data.
cloud.Save( "Shopping_List", {"Apples":8,"Oranges":6}, onSave )

//Handle the response.
function onSave( error, response, status )
{
    if( error ) console.log( "Http Error: " + response + " " + status )
    else if( response.error ) console.log( "CloudStore Error: " + response.error )
    else console.log( "Data Saved: " + response.data )
}
```

> <aside class="notice-right">You must replace <code>&lt;YOUR_CLOUDSTORE_KEY&gt;</code> with your personal CloudStore key.</aside>

## Getting data

`cloud.Load( key, callback, password )`

### Query Parameters

Parameter | Required | Description
--------- | ------- | -----------
key | yes | A string id to identify the data to store. This value is case sensitive.
callback | no | A function that returns 3 parameters: error, response, status.  If the response is OK, you can access the data through response.data.
password | no | Password to access the data file (Passwords are set in the CloudStore [admin control panel](https://enjine.cloud/cloudstore/admin.html)). If a password has been set and you do not pass the correct value, you will get an error.

### Example

```javascript
//Create CloudStore component.
cloud = app.CreateCloudStore( "<YOUR_CLOUDSTORE_KEY>" )

//Load some data.
cloud.Load( "Shopping_List", onLoad )

//Handle the response.
function onLoad( error, response, status )
{
    if( error ) console.log( "Http Error: " + response + " " + status )
    else if( response.error ) console.log( "CloudStore Error: " + response.error )
    else console.log( response.data.Apples );
}
```

## Merging data

`cloud.Merge( key, value, callback, password )`

The **Merge** function allows you to merge and update existing data objects.

If the data object you are trying to merge with does not exist, it will create a new object with the **key** parameter. 

 - The **Merge** function recursively merges values passed with the source object, replacing any existing data and adding new data.
 - Source properties that resolve to undefined are skipped if a destination value exists.
 - Array and plain object properties are merged recursively.
 - Other objects and value types are overridden by assignment.
 - Source objects are applied from left to right.
 - Subsequent sources overwrite property assignments of previous sources.

Parameter | Required | Description
--------- | ------- | -----------
key | yes | A string id to identify the data to merge
value | yes | A JavaScript data object containing the data you want to merge with the source object.  If no source object exists, a new object will be created
callback | no | A function that returns 3 parameters: error, response, status
password | no | Password to access data file if one is set

### Example

#### App 1

```javascript
//Create CloudStore component.
cloud = app.CreateCloudStore( "<YOUR_CLOUDSTORE_KEY>" )

//Save some data.
cloud.Save( "Shopping_List", {"Apples":8,"Oranges":6}, onSave )

function onSave( error, response, status )
{
  if( error ) console.log( "Http Error: " + response + " " + status )
  else if( response.error ) console.log( "CloudStore Error: " + response.error )
  else console.log( "Data Saved: " + response.data )
}
```

#### App 2

```javascript
// Create CloudStore component.
cloud = app.CreateCloudStore( "<YOUR_CLOUDSTORE_KEY>" )

// Update our Shopping List with some a new item and change the value of existing items.
cloud.Merge( "Shopping_List", {"Apples":8,"Oranges":10,"Bananas":8}, onSave )

// Handle the response.
function onSave( error, response, status )
{
    if( error ) console.log( "Http Error: " + response + " " + status )
    else if( response.error ) console.log( "CloudStore Error: " + response.error )
    else {
        // Data merged successfully
        // Lets now reload the data to see if our object has changed
        cloud.Load( "Shopping_List", onLoad )
    }
}

// Handle the response.
function onLoad( error, response, status )
{
    // You should now see your new Shopping_List with 10 Oranges and 8 Bananas
    if( error ) console.log( "Http Error: " + response + " " + status )
    else if( response.error ) console.log( "CloudStore Error: " + response.error )
    else console.log( response.data.Bananas );
}
```

## Listing Data Files

`cloud.List( filter, callback )`

The **List** function allows you to get a comma separated list of all your data files that match the filter.  

For example, if you had two data files with the keys "steve1" and "steve2" and called the **List** function like this:

'cloud.List( "steve", callback )'

You would get back a comma separated string that looked like this: "steve1,steve2".

Parameter | Required | Description
--------- | ------- | -----------
filter | yes | A string containing the word you want to search for.  This is case sensitive.  If you pass and empty string "", it will return **all** your data files.
callback | yes | A function that returns 3 parameters: error, response, status. On a successful return, you should see your data in response.data

### Example

```javascript
//Create CloudStore component.
cloud = app.CreateCloudStore( "<YOUR_CLOUDSTORE_KEY>" )

cloud.List( "Shopping", onList )

//Handle the response.
function onList( error, response, status )
{
    if( error ) console.log( "Http Error: " + response + " " + status )
    else if( response.error ) console.log( "CloudStore Error: " + response.error )
    else console.log( response.data ); 
    // this will show a comma separated list of all files matching your filter
}
```

## Deleting data

`cloud.Delete( key, callback, password )`

The **Delete** function allows you to delete existing data objects from the CloudStore.

You delete cloudstore objects by sending the id of the item you wish to remove. 
If you try removing an object that does not exist, it will return with an error **NoFile**.

Parameter | Required | Description
--------- | ------- | -----------
key | yes | A string id to identify the data store to delete.  This is case sensitive.
callback | no | A function that returns 3 parameters: error, response, status. On success you will see the string 'File Deleted' in response.data
password | no | The value for the **edit** password set in the CloudStore [admin control panel](https://enjine.cloud/cloudstore/admin.html)

### Example

```javascript
//Create CloudStore component.
cloud = app.CreateCloudStore( "<YOUR_CLOUDSTORE_KEY>" )

cloud.Delete( "Shopping_List", onDelete )

//Handle the response.
function onDelete( error, response, status )
{
    if( error ) console.log( "Http Error: " + response + " " + status )
    else if( response.error ) console.log( "CloudStore Error: " + response.error )
    else console.log( response.data );
}
```

## Password Protection

You can control **read** and **edit** access to your data files by setting a password to each file in the CloudStore [admin control panel](https://enjine.cloud/cloudstore/admin.html).  

Please see the section [Dashboard](#Dashboard)

# Media

CloudStore allows you to store media files (text and image files) in the cloud so they can be accessed across multiple apps 
and stay persistent event when your app is removed from your device.

> <aside class="notice-right">To access media files across multiple apps, you will need to use the same api key in each app</aside>

## Upload

`cloud.Upload( data, filename, type, callback )`

The **Upload** function allows you to upload a file to the cloud.  You can set permissions for editing files in the [admin control panel](https://enjine.cloud/cloudstore/admin.html)

Parameter | Required | Description
--------- | ------- | -----------
data | yes | The file being uploaded in string form
filename | yes | The filename you want it stored as. This will be case sensitive when reading. Do not use spaces in your filenames.
type | no | The file type being uploaded (e.g. "image/jpg" or "text")
callback | no | A function that returns 3 parameters: error, response, status. On success you will see confirmation in response.data

### Example

```javascript
cloud = app.CreateCloudStore( "<YOUR_CLOUDSTORE_KEY>" )
app.ChooseFile( "Choose a file", "*/*", OnFileChoose );

// Let's assume you choose an image as your file
function OnFileChoose( filename )
{
    // filename
    data = app.ReadFile( filename, "base64" )
    cloud.Upload( data, "jazz3.jpg", "image/jpg", onUpload )
}

function onUpload( error, response, status )
{
    if( error ) console.log( "Http Error: " + response + " " + status )
    else if( response.error ) console.log( "CloudStore Error: " + response.error )
    else console.log( response.message );
}
```

# Dashboard

## Loading

- Navigate to [https://enjine.cloud/cloudstore/admin.html](https://enjine.cloud/cloudstore/admin.html)
- Log in using your **Username** and **Password**
- You should now be at the enjine.io control panel

## User Info

<%= image_tag "images/dashboard_user_info.png" %>

The **user info** panel displays all your configuration data including your API key and Media path to access your media files

## Data Files

<%= image_tag "images/dashboard_data_files.png" %>

The **data files** panel displays all your uploaded data files.  If you click on the names of the files, you will see information on usage and size appear 
in the panel to the right of the list.

### Password Protection

It is possible to control **view** and **edit** access to data files uploaded to the **CloudStore dashboard**.

To the right of each file is a checkbox.  If you select one or more files using the checkboxes you will see the **delete** and **padlock** icons highlighted.

<%= image_tag "images/dashboard_df_pwd_1.png" %>

If you press the **padlock** icon you will see a dialog box appear allowing you to set a password for **view** or **edit** access to all selected files

<%= image_tag "images/dashboard_df_pwd_2.png" %>

Set the password to enable **edit** control. Now whenever a user tries to edit this file they will need to pass along the password to each function call.

### Example

Let's start by setting a an **edit** password on our **Shopping List** data file

<%= image_tag "images/dashboard_df_pwd_3.png" %>

Now let's try merging with this data file, but without appending the password in our **Merge** function

```javascript
//Create CloudStore component.
cloud = app.CreateCloudStore( "<YOUR_CLOUDSTORE_KEY>" )

function btnMerge_OnTouch()
{
    cloud.Merge( "Shopping_List", { plums:5 }, onMerge )
}

function onMerge( error, response, status )
{
    if( error ) console.log( "Http Error: " + response + " " + status )
    else if( response.error ) console.log( "CloudStore Error: " + response.error )
    else { console.log( response.data ) }
}
```

If you try to run the code above you should get a **File Locked** error.  
You must send the correct password as the final parameter in the **Merge** function:

```javascript
//Create CloudStore component.
cloud = app.CreateCloudStore( "<YOUR_CLOUDSTORE_KEY>" )

function btnMerge_OnTouch()
{
    cloud.Merge( "Shopping_List", { plums:5 }, onMerge, "12345" )
}

function onMerge( error, response, status )
{
    if( error ) console.log( "Http Error: " + response + " " + status )
    else if( response.error ) console.log( "CloudStore Error: " + response.error )
    else { console.log( response.data ) }
}
```

If you now run this code you should see the message **Entry saved**.

## Media Files

<%= image_tag "images/dashboard_media_files.png" %>

The **media files** panel lists all your uploaded media files.  Like the data files panel, if you click on the filenames it will show you details about the uploaded file 
including a preview snapshot of the file if it's an image file.

### Password Protection

It is possible to control **edit** access to files uploaded to the **CloudStore dashboard**.

To the right of each file is a checkbox.  If you select one or more files using the checkboxes you will see the **delete** and **padlock** icons highlighted.

<%= image_tag "images/dashboard_mf_pwd_1.png" %>

If you press the **padlock** icon you will see a dialog box appear allowing you to set a password for **edit** access to all selected files

<%= image_tag "images/dashboard_mf_pwd_2.png" %>

Set the password to enable **edit** control. Now whenever a user tries to edit this file they will need to pass along the password to each function call.

